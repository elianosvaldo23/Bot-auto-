import os
import logging
import asyncio
import schedule
import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from openai import OpenAI
import random
import json
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configuraci√≥n de OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "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")
client_openai = OpenAI(api_key=OPENAI_API_KEY)

# Configuraci√≥n del bot
BOT_TOKEN = os.getenv("BOT_TOKEN", "7551775190:AAFtrWkTZYAqK0Ei0fptBzsP4VHRQGi9ISw")
ADMIN_ID = int(os.getenv("ADMIN_ID", "1742433244"))

# Definici√≥n de canales y sus tem√°ticas
CHANNELS = {
    "Conexi√≥n fitness": {"id": -1002299414374, "emoji": "üí™"},
    "Criptomonedas": {"id": -1002333098537, "emoji": "üí∞"},
    "Vitalidad al l√≠mite": {"id": -1002297575582, "emoji": "üå±"},
    "Pensamientos de millonarios": {"id": -1002391067004, "emoji": "üíé"}
}

# Estado para almacenar configuraciones y estad√≠sticas
bot_state = {
    "auto_post": True,
    "post_time": "10:00",
    "last_posts": {},
    "post_frequency": "daily",  # daily, weekly, custom
    "custom_schedule": {},
    "stats": {
        "total_posts": 0,
        "posts_per_channel": {channel: 0 for channel in CHANNELS}
    }
}

# Intentar cargar estado previo si existe
try:
    with open('bot_state.json', 'r') as f:
        bot_state = json.load(f)
except FileNotFoundError:
    # Si el archivo no existe, guardar el estado inicial
    with open('bot_state.json', 'w') as f:
        json.dump(bot_state, f)

# Funci√≥n para guardar el estado del bot
def save_state():
    with open('bot_state.json', 'w') as f:
        json.dump(bot_state, f)

# Funci√≥n para generar contenido con OpenAI
async def generate_content(theme):
    prompts = {
        "Conexi√≥n fitness": "Crea una publicaci√≥n motivadora sobre fitness, ejercicio o vida saludable. Incluye un consejo pr√°ctico y una frase motivadora. Formato: t√≠tulo en negrita, 2-3 p√°rrafos de contenido, y una conclusi√≥n inspiradora. Usa emojis relevantes.",
        "Criptomonedas": "Crea una publicaci√≥n informativa sobre criptomonedas. Incluye una tendencia actual, un dato interesante y un consejo para inversores. No hagas predicciones espec√≠ficas de precios. Formato: t√≠tulo en negrita, 2-3 p√°rrafos informativos, y una conclusi√≥n. Usa emojis relevantes.",
        "Vitalidad al l√≠mite": "Crea una publicaci√≥n sobre salud hol√≠stica, bienestar y vitalidad. Incluye un consejo sobre alimentaci√≥n, descanso o t√©cnicas de bienestar. Formato: t√≠tulo en negrita, 2-3 p√°rrafos informativos, y una conclusi√≥n pr√°ctica. Usa emojis relevantes.",
        "Pensamientos de millonarios": "Crea una publicaci√≥n inspiradora con ense√±anzas de emprendedores exitosos y mentalidad de abundancia. Incluye una cita de un emprendedor famoso y un principio de √©xito. Formato: t√≠tulo en negrita, 2-3 p√°rrafos motivadores, y una reflexi√≥n final. Usa emojis relevantes."
    }
    
    try:
        response = client_openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Eres un experto creador de contenido para redes sociales. Creas publicaciones atractivas, informativas y motivadoras."},
                {"role": "user", "content": prompts[theme]}
            ],
            temperature=0.7,
            max_tokens=500
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"Error al generar contenido: {e}")
        return f"‚ùå No se pudo generar contenido para {theme} debido a un error. Por favor, intenta m√°s tarde."

# Funci√≥n para generar una imagen relacionada (simulada por ahora)
async def generate_image_prompt(theme):
    try:
        response = client_openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Genera una descripci√≥n detallada para crear una imagen relacionada con el tema indicado. La descripci√≥n debe ser detallada y visual."},
                {"role": "user", "content": f"Crea una descripci√≥n detallada para generar una imagen relacionada con {theme}. La imagen ser√° usada en redes sociales."}
            ],
            temperature=0.7,
            max_tokens=200
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"Error al generar prompt de imagen: {e}")
        return f"Una imagen inspiradora sobre {theme}"

# Funci√≥n para publicar en un canal
async def post_to_channel(context, channel_name, content=None):
    channel_id = CHANNELS[channel_name]["id"]
    emoji = CHANNELS[channel_name]["emoji"]
    
    if content is None:
        content = await generate_content(channel_name)
    
    # A√±adir firma y emoji tem√°tico
    current_date = datetime.now().strftime("%d/%m/%Y")
    signature = f"\n\n{emoji} *{channel_name}* | {current_date}"
    full_content = f"{content}\n{signature}"
    
    try:
        # Enviar mensaje
        message = await context.bot.send_message(
            chat_id=channel_id,
            text=full_content,
            parse_mode='Markdown'
        )
        
        # Actualizar estad√≠sticas
        bot_state["stats"]["total_posts"] += 1
        bot_state["stats"]["posts_per_channel"][channel_name] += 1
        bot_state["last_posts"][channel_name] = {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "message_id": message.message_id
        }
        save_state()
        
        return True, message.message_id
    except Exception as e:
        logger.error(f"Error al publicar en {channel_name}: {e}")
        return False, str(e)

# Funci√≥n para publicar en todos los canales
async def post_to_all_channels(context):
    results = {}
    for channel in CHANNELS:
        success, msg_id = await post_to_channel(context, channel)
        results[channel] = "‚úÖ Publicado" if success else f"‚ùå Error: {msg_id}"
    
    # Notificar al administrador
    admin_message = "*Resumen de publicaciones autom√°ticas:*\n\n"
    for channel, result in results.items():
        admin_message += f"*{channel}*: {result}\n"
    
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=admin_message,
        parse_mode='Markdown'
    )

# Comando /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    welcome_message = (
        "üëã *¬°Bienvenido al Bot de Publicaciones Autom√°ticas!*\n\n"
        "Este bot publica contenido autom√°ticamente en varios canales tem√°ticos.\n\n"
        "Comandos disponibles:\n"
        "/menu - Mostrar men√∫ principal\n"
        "/status - Ver estado actual del bot\n"
        "/post - Publicar contenido manualmente\n"
        "/settings - Configurar el bot\n"
        "/help - Mostrar ayuda\n\n"
        "Solo el administrador puede usar todas las funciones."
    )
    
    keyboard = [
        [InlineKeyboardButton("üìã Men√∫ Principal", callback_data="menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Comando /menu
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # Verificar si es administrador
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ö†Ô∏è Solo el administrador puede acceder al men√∫ completo.")
        return
    
    keyboard = [
        [
            InlineKeyboardButton("üìù Publicar Ahora", callback_data="publish_menu"),
            InlineKeyboardButton("‚öôÔ∏è Configuraci√≥n", callback_data="settings_menu")
        ],
        [
            InlineKeyboardButton("üìä Estad√≠sticas", callback_data="stats"),
            InlineKeyboardButton("‚ùì Ayuda", callback_data="help")
        ],
        [
            InlineKeyboardButton("üîÑ Estado Actual", callback_data="status")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "ü§ñ *Men√∫ Principal*\n\nSelecciona una opci√≥n:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Funci√≥n para manejar callbacks
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    callback_data = query.data
    
    # Verificar si es administrador para la mayor√≠a de las acciones
    if user_id != ADMIN_ID and not callback_data in ["help", "about"]:
        await query.edit_message_text("‚ö†Ô∏è Solo el administrador puede usar esta funci√≥n.")
        return
    
    if callback_data == "menu":
        keyboard = [
            [
                InlineKeyboardButton("üìù Publicar Ahora", callback_data="publish_menu"),
                InlineKeyboardButton("‚öôÔ∏è Configuraci√≥n", callback_data="settings_menu")
            ],
            [
                InlineKeyboardButton("üìä Estad√≠sticas", callback_data="stats"),
                InlineKeyboardButton("‚ùì Ayuda", callback_data="help")
            ],
            [
                InlineKeyboardButton("üîÑ Estado Actual", callback_data="status")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "ü§ñ *Men√∫ Principal*\n\nSelecciona una opci√≥n:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif callback_data == "publish_menu":
        keyboard = []
        # Bot√≥n para cada canal
        for channel in CHANNELS:
            keyboard.append([InlineKeyboardButton(f"{CHANNELS[channel]['emoji']} {channel}", callback_data=f"publish_{channel}")])
        
        # Bot√≥n para publicar en todos los canales
        keyboard.append([InlineKeyboardButton("üîÑ Publicar en Todos", callback_data="publish_all")])
        keyboard.append([InlineKeyboardButton("üîô Volver", callback_data="menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìù *Publicar Contenido*\n\nSelecciona un canal para publicar:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif callback_data.startswith("publish_"):
        channel_name = callback_data.replace("publish_", "")
        
        if channel_name == "all":
            await query.edit_message_text("üîÑ Publicando en todos los canales... Esto puede tomar un momento.")
            await post_to_all_channels(context)
            
            # Mensaje de confirmaci√≥n con bot√≥n para volver
            keyboard = [[InlineKeyboardButton("üîô Volver al Men√∫", callback_data="menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚úÖ *Publicaci√≥n Completada*\n\nSe ha publicado contenido en todos los canales.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(f"üîÑ Generando contenido para {channel_name}...")
            success, result = await post_to_channel(context, channel_name)
            
            # Mensaje de confirmaci√≥n con bot√≥n para volver
            keyboard = [[InlineKeyboardButton("üîô Volver al Men√∫", callback_data="menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if success:
                await query.edit_message_text(
                    f"‚úÖ *Publicaci√≥n Exitosa*\n\nSe ha publicado contenido en el canal {channel_name}.",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    f"‚ùå *Error al Publicar*\n\nNo se pudo publicar en {channel_name}.\nError: {result}",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
    
    elif callback_data == "settings_menu":
        auto_post_status = "‚úÖ Activado" if bot_state["auto_post"] else "‚ùå Desactivado"
        post_time = bot_state["post_time"]
        frequency = bot_state["post_frequency"]
        
        keyboard = [
            [InlineKeyboardButton(f"üîÑ Auto-publicaci√≥n: {auto_post_status}", callback_data="toggle_auto_post")],
            [InlineKeyboardButton(f"‚è∞ Hora de publicaci√≥n: {post_time}", callback_data="set_post_time")],
            [InlineKeyboardButton(f"üìÖ Frecuencia: {frequency}", callback_data="set_frequency")],
            [InlineKeyboardButton("üîô Volver", callback_data="menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚öôÔ∏è *Configuraci√≥n*\n\nAjusta los par√°metros del bot:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif callback_data == "toggle_auto_post":
        bot_state["auto_post"] = not bot_state["auto_post"]
        save_state()
        
        # Redireccionar al men√∫ de configuraci√≥n
        await button_callback(update, context)
    
    elif callback_data == "set_post_time":
        times = ["08:00", "10:00", "12:00", "15:00", "18:00", "20:00", "22:00"]
        keyboard = []
        
        # Crear filas de 3 botones cada una
        row = []
        for i, time in enumerate(times):
            row.append(InlineKeyboardButton(time, callback_data=f"time_{time}"))
            if (i + 1) % 3 == 0 or i == len(times) - 1:
                keyboard.append(row)
                row = []
        
        keyboard.append([InlineKeyboardButton("üîô Volver", callback_data="settings_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚è∞ *Configurar Hora de Publicaci√≥n*\n\nSelecciona la hora para las publicaciones autom√°ticas:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif callback_data.startswith("time_"):
        selected_time = callback_data.replace("time_", "")
        bot_state["post_time"] = selected_time
        save_state()
        
        # Actualizar programaci√≥n
        schedule_posts(context)
        
        await query.edit_message_text(
            f"‚úÖ Hora de publicaci√≥n establecida a las {selected_time}.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Volver", callback_data="settings_menu")]]),
            parse_mode='Markdown'
        )
    
    elif callback_data == "set_frequency":
        keyboard = [
            [
                InlineKeyboardButton("üìÖ Diario", callback_data="freq_daily"),
                InlineKeyboardButton("üìÜ Semanal", callback_data="freq_weekly")
            ],
            [InlineKeyboardButton("üîô Volver", callback_data="settings_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìÖ *Configurar Frecuencia*\n\nSelecciona con qu√© frecuencia se publicar√° el contenido:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif callback_data.startswith("freq_"):
        frequency = callback_data.replace("freq_", "")
        bot_state["post_frequency"] = frequency
        save_state()
        
        # Actualizar programaci√≥n
        schedule_posts(context)
        
        await query.edit_message_text(
            f"‚úÖ Frecuencia establecida a {frequency}.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Volver", callback_data="settings_menu")]]),
            parse_mode='Markdown'
        )
    
    elif callback_data == "stats":
        total_posts = bot_state["stats"]["total_posts"]
        posts_per_channel = bot_state["stats"]["posts_per_channel"]
        
        stats_text = "*üìä Estad√≠sticas de Publicaciones*\n\n"
        stats_text += f"*Total de publicaciones:* {total_posts}\n\n"
        stats_text += "*Publicaciones por canal:*\n"
        
        for channel, count in posts_per_channel.items():
            emoji = CHANNELS[channel]["emoji"]
            stats_text += f"{emoji} *{channel}:* {count}\n"
        
        # A√±adir √∫ltima publicaci√≥n si existe
        if bot_state["last_posts"]:
            stats_text += "\n*√öltimas publicaciones:*\n"
            for channel, data in bot_state["last_posts"].items():
                if "timestamp" in data:
                    stats_text += f"{CHANNELS[channel]['emoji']} *{channel}:* {data['timestamp']}\n"
        
        keyboard = [[InlineKeyboardButton("üîô Volver", callback_data="menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif callback_data == "status":
        auto_post = "‚úÖ Activado" if bot_state["auto_post"] else "‚ùå Desactivado"
        post_time = bot_state["post_time"]
        frequency = bot_state["post_frequency"]
        
        status_text = "*üîÑ Estado Actual del Bot*\n\n"
        status_text += f"*Auto-publicaci√≥n:* {auto_post}\n"
        status_text += f"*Hora de publicaci√≥n:* {post_time}\n"
        status_text += f"*Frecuencia:* {frequency}\n\n"
        
        status_text += "*Canales configurados:*\n"
        for channel, data in CHANNELS.items():
            status_text += f"{data['emoji']} *{channel}*\n"
        
        keyboard = [[InlineKeyboardButton("üîô Volver", callback_data="menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            status_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif callback_data == "help":
        help_text = (
            "*‚ùì Ayuda del Bot*\n\n"
            "*Comandos disponibles:*\n"
            "/start - Iniciar el bot\n"
            "/menu - Mostrar men√∫ principal\n"
            "/post - Publicar contenido manualmente\n"
            "/settings - Configurar el bot\n"
            "/status - Ver estado actual\n"
            "/help - Mostrar esta ayuda\n\n"
            
            "*Funcionalidades:*\n"
            "‚Ä¢ Publicaci√≥n autom√°tica en canales tem√°ticos\n"
            "‚Ä¢ Generaci√≥n de contenido con IA\n"
            "‚Ä¢ Programaci√≥n de publicaciones\n"
            "‚Ä¢ Estad√≠sticas de publicaciones\n\n"
            
            "*Tem√°ticas disponibles:*\n"
            "üí™ Conexi√≥n fitness\n"
            "üí∞ Criptomonedas\n"
            "üå± Vitalidad al l√≠mite\n"
            "üíé Pensamientos de millonarios\n\n"
            
            "Para m√°s informaci√≥n o soporte, contacta al administrador."
        )
        
        keyboard = [[InlineKeyboardButton("üîô Volver", callback_data="menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

# Comando /post
async def post_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # Verificar si es administrador
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ö†Ô∏è Solo el administrador puede publicar contenido.")
        return
    
    keyboard = []
    # Bot√≥n para cada canal
    for channel in CHANNELS:
        keyboard.append([InlineKeyboardButton(f"{CHANNELS[channel]['emoji']} {channel}", callback_data=f"publish_{channel}")])
    
    # Bot√≥n para publicar en todos los canales
    keyboard.append([InlineKeyboardButton("üîÑ Publicar en Todos", callback_data="publish_all")])
    keyboard.append([InlineKeyboardButton("üîô Volver al Men√∫", callback_data="menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìù *Publicar Contenido*\n\nSelecciona un canal para publicar:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Comando /settings
async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # Verificar si es administrador
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ö†Ô∏è Solo el administrador puede modificar la configuraci√≥n.")
        return
    
    await button_callback(Update(update_id=0, callback_query=type('obj', (object,), {
        'data': 'settings_menu',
        'from_user': type('obj', (object,), {'id': ADMIN_ID}),
        'answer': lambda: None,
        'edit_message_text': update.message.reply_text
    })), context)

# Comando /status
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # Verificar si es administrador
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ö†Ô∏è Solo el administrador puede ver el estado.")
        return
    
    await button_callback(Update(update_id=0, callback_query=type('obj', (object,), {
        'data': 'status',
        'from_user': type('obj', (object,), {'id': ADMIN_ID}),
        'answer': lambda: None,
        'edit_message_text': update.message.reply_text
    })), context)

# Comando /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await button_callback(Update(update_id=0, callback_query=type('obj', (object,), {
        'data': 'help',
        'from_user': type('obj', (object,), {'id': update.effective_user.id}),
        'answer': lambda: None,
        'edit_message_text': update.message.reply_text
    })), context)

# Funci√≥n para programar las publicaciones
def schedule_posts(context):
    # Limpiar todas las tareas programadas anteriormente
    schedule.clear()
    
    if bot_state["auto_post"]:
        post_time = bot_state["post_time"]
        
        if bot_state["post_frequency"] == "daily":
            schedule.every().day.at(post_time).do(lambda: asyncio.create_task(post_to_all_channels(context)))
        elif bot_state["post_frequency"] == "weekly":
            schedule.every().monday.at(post_time).do(lambda: asyncio.create_task(post_to_all_channels(context)))

# Funci√≥n para ejecutar las tareas programadas
async def run_scheduled_tasks(context):
    while True:
        schedule.run_pending()
        await asyncio.sleep(60)  # Revisar cada minuto

# Funci√≥n principal
async def main():
    # Crear la aplicaci√≥n
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Registrar manejadores de comandos
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("post", post_command))
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # Registrar manejador de botones
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # Programar publicaciones
    schedule_posts(application)
    
    # Iniciar el ejecutor de tareas programadas en segundo plano
    asyncio.create_task(run_scheduled_tasks(application))
    
    # Iniciar el bot
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    # Mantener el bot ejecut√°ndose hasta que se interrumpa manualmente
    try:
        await application.updater.stop()
        await application.stop()
    finally:
        # Guardar el estado antes de salir
        save_state()

if __name__ == "__main__":
    asyncio.run(main())
